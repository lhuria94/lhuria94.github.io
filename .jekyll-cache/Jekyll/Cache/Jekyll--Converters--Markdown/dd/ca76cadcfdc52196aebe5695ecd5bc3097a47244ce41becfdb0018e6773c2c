I"<p>Ah, it feels good to be back into blogging days ü§©. So, a little bit about what I‚Äôm upto these days; I am currently engaged in helping build an Identity and access management solution for one of the project. Now in IAM, there are lot of things to cover but my favourite part is SAML. And While working on it, I have realised that the core concepts are often a gap in understanding with respect to what it is actually.  So, I am here to share the learnings in this post as per my experience.</p>

<h3 id="what-is-iam-identity-and-access-management">What is IAM (Identity and access management)?</h3>
<p>If we wanted to understand in simple words, lets break it down:</p>
<ul>
  <li><em>The first word is Identity ~</em> This, we can relate to punch card attendance system. With punch card, It‚Äôs usually a flat and stiff paper and contains digital information, they just need to wave near a reader, which ensures if the correct person is logging in/out. Similarly, here it also means verifying the user who they claim to be.</li>
  <li><em>Second is Access ~</em> This determines what level of access is provided to an individual. Easy way to understand is like if you go to a nightclub/Casino, and there are guards taking care of who is allowed to come in, who can access VIP area.</li>
  <li><em>Third is Management ~</em> All of this falls under IT (Security) departments to manage the access control, policies etc.</li>
</ul>

<h4 id="a-little-more-about-it">A little more about it:</h4>
<p>Identity and access management also called Identity Management system (IDMS) in enterprise is as crucial as anything these days and it‚Äôs all about setting up standards and addressing the needs around enabling the right access at the right time for individuals to access not only IT resources but the hardware and applications employees need to access. It‚Äôs often required to meet rigorous and complex security compliance requirements in enterprises.</p>

<p>IAM‚Äôs pretty popular especially with enterprises as there is a critical need to manage information which is spread across internal and external applications with data security in mind.</p>

<p>IAM‚Äôs core objective is to assign one identity per individual and have the ability to control it from one place which would help reflect in all systems. It also helps ability to monitor user‚Äôs activities, permit user roles, enforce policies at org level which is an on-going process (basically handles authn (Authentication) and authz (Authorization)).</p>

<h3 id="how-iam-works">How IAM works?</h3>
<p>IAM is designed to perform three things -</p>
<ul>
  <li>Identify</li>
  <li>Authn (Authentication)</li>
  <li>Authz (Authorization)</li>
</ul>

<p>A lot of people gets confused b/w Authentication and Authorization, ill try to explain in simplistic way:</p>

<ul>
  <li><em>Authentication:</em> When you enter a username/email &amp; password into a application, the app tries to authenticate by checking the database and if the information which you entered matches; that means you are authenticated.</li>
</ul>

<p><img src="/assets/img/2020-04-11-structure-react-native-project/structure.png" alt="authentication" /></p>

<p>If you look at the above structure, most of it is self-explanatory. However, I would like to focus on some of the aspects.</p>

<ul>
  <li><strong>src/api</strong>
    <ul>
      <li>helper.js - This file will have helper methods w.r.t any code related to APIs. Like get, post, put, etc.</li>
      <li>utils.js - Here we could add usual utility functions.</li>
    </ul>
  </li>
  <li><strong>assets</strong>
    <ul>
      <li>icons - Keep all of your icons (SVGs) or any other format you usually use.</li>
      <li>images - Keep all of your images (background images), logos, etc.</li>
      <li>themes
        <ul>
          <li>light.js - Have all of your light theme styles here such as color palette, fonts, etc.</li>
          <li>dark.js - Have all of your dark theme styles here.</li>
          <li>themeProvider.js - This will contain the logic of deciding which theme to use based on the User‚Äôs preferences.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>components</strong>
    <ul>
      <li>common - This will contain re-usable isolated components like button, input, tabs, etc.</li>
      <li>sections - This will contain reusable sections like navigation i.e sidebar, bottom navigation, etc.</li>
    </ul>
  </li>
  <li><strong>config</strong> - I find this particularly very useful, we keep all the configurations with respect to say forms, static lists, action messages, validation messages, etc.</li>
  <li><strong>features</strong> - A lot of people call this directory as components as well, which seem confusing to me as we can have more components inside features as well. This will have standard modules/features, the basic functionality of the site.</li>
  <li><strong>global</strong> - This will have global functions that can be reused throughout the application.</li>
  <li><strong>routes</strong> - This will have site-level navigation defined.
    <ul>
      <li>routes.navigator.js</li>
    </ul>
  </li>
  <li><strong>store</strong> - This will contain the app level state management which will serve the app current state.</li>
</ul>

<blockquote>
  <p>Keep in mind, that this structure is not specific to react-native, we could use in ‚ÄúReact‚Äù projects as well. That‚Äôs up to us.
Furthermore, the structure does not include core files such as package.json, babel, eslint, etc as they are mostly going to be at the root anyway.</p>
</blockquote>

<p>That‚Äôs all. If you would like to read more about it, I‚Äôd refer few good links to go through:</p>
<ul>
  <li><a href="https://medium.com/react-native-training/best-practices-for-creating-react-native-apps-part-1-66311c746df3">Best Practices for React native apps</a></li>
</ul>

<p>Thanks for reading. üòÉ</p>

:ET