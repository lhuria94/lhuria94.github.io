I" ~<p>I have been using Sass for like past two years and now Iâ€™m a huge fan. Even though we were doing pretty much alright with writing CSS but it never gave us that kind of flexibility that Sass provides like one of the things could be managing the complexity in stylesheets as our apps get more and more substantial. Anyways, Enough about my experience already as today we have got a bunch of cool things to cover!</p>

<h2 id="what-is-sass">What is Sass?</h2>

<p>Itâ€™s a CSS preprocessor, thatâ€™s what you will get if you start googling and its true but hold that thought as thereâ€™s more to it.</p>

<p>Sass lets you use features like variables, nesting, inheritance and all with a CSS-compatible syntax. This is really obliging when you want to reduce repetition and make your massive stylesheets more organised.</p>

<p><strong>Important:</strong> Itâ€™s not a replacement for CSS, its kind of an interpreter/transpiler which spits out CSS in the end actually.</p>

<p>You must be thinking, then what is the difference between Sass and Scss?</p>

<p>Sass is itself carved into two types of syntaxes/file types: <code class="highlighter-rouge">.sass</code> &amp; <code class="highlighter-rouge">.scss</code>.</p>

<p><strong>Sass</strong> (Older syntax) was not quite accepted by a large audience. The reason was mostly because itâ€™s indent based instead of braces and it didnâ€™t require semicolons, which increases the probability of human errors while writing.</p>

<p>Where <strong>Scss</strong> (New syntax) was widely accepted because itâ€™s quite similar to the way how we write CSS. Its kind of a win-win using Scss as we get to write stylesheets like CSS but we still get the benefits of Sass. Awesome!</p>

<blockquote>
  <p>From now on, this article will assume that you understand Sass and well versed with its basics and practical usage, if not refer to <a href="http://sass-lang.com/guide">this</a> for more information.</p>
</blockquote>

<p>Without further ado, letâ€™s hop on the cool things we can use while writing scss:</p>

<h2 id="using-variables-as-a-selector">Using variables as a selector</h2>

<p>We can define our selectors and use it in our stylesheets.
For example:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span> <span class="no">Define</span> <span class="n">your</span> <span class="n">base</span> <span class="n">selector</span><span class="o">.</span>
<span class="vg">$header</span><span class="o">-</span><span class="n">base</span><span class="o">-</span><span class="ss">class: </span><span class="s1">'.header'</span><span class="p">;</span>

<span class="c1">#{$header-base-class} {</span>
  <span class="ss">background: </span><span class="n">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>
<span class="p">.</span><span class="nf">header</span> <span class="p">{</span>
  <span class="ss">background: </span><span class="n">white</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Or, there could be a whole lot of use-cases where this can be super useful! Like umm.. in Media queries? Letâ€™s go through it:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$small</span><span class="o">-</span><span class="ss">only: </span><span class="mi">640</span><span class="n">px</span> <span class="p">(</span><span class="no">Define</span> <span class="n">somewhere</span> <span class="k">else</span> <span class="n">like</span> <span class="n">maybe</span> <span class="k">in</span> <span class="n">_settings</span><span class="p">.</span><span class="nf">scss</span><span class="p">)</span>

<span class="vi">@media</span> <span class="p">(</span><span class="n">max</span><span class="o">-</span><span class="ss">width: </span><span class="c1">#{$small-only}) {</span>
  <span class="sr">//</span> <span class="no">Here</span> <span class="k">do</span> <span class="n">your</span> <span class="n">thing</span><span class="p">,</span> <span class="n">the</span> <span class="n">styles</span> <span class="n">will</span> <span class="n">only</span> <span class="n">be</span> <span class="n">applied</span> <span class="n">to</span> <span class="n">viewport</span> <span class="o">&lt;</span> <span class="vg">$small</span><span class="o">-</span><span class="n">only</span> <span class="n">breakpoint</span><span class="o">.</span>
<span class="p">}</span></code></pre></figure>

<p>Easy-peasy right? ðŸ˜ƒ</p>

<p>Now you donâ€™t have to define a hardcoded value in each of the media queries. Just change at one place like in this case <code class="highlighter-rouge">_settings.scss</code> and get the results everywhere.</p>

<h2 id="parent-referencing-using-a-prefix">Parent referencing using a prefix</h2>

<p>You must be familiar with <code class="highlighter-rouge">&amp;</code> ampersand prefix we generally use. This syntax generally allows you nest nested selector modifiers with reference to its parent.</p>

<p>For example - You would like to change a divâ€™s background colour on hover.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">.</span><span class="nf">highlight</span> <span class="p">{</span>
  <span class="o">&amp;</span><span class="ss">:hover</span> <span class="p">{</span>
    <span class="ss">color: </span><span class="n">red</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">highlight</span><span class="ss">:hover</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="n">red</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>But <code class="highlighter-rouge">&amp;</code> can also be used just as a prefix to reference its parent.</p>

<p>Letâ€™s say you have a base selector and want to apply particular style only when there is some specific class selector exists, usually, we tend to do something like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$base</span><span class="o">-</span><span class="n">item</span><span class="o">-</span><span class="ss">selector: </span><span class="s1">'.base-selector'</span><span class="p">;</span>

<span class="c1">#{$base-item-selector} {</span>
  <span class="o">&amp;--</span><span class="n">conditional</span><span class="o">-</span><span class="n">selector</span> <span class="p">{</span>
    <span class="c1">#{$base-item-selector} {</span>
      <span class="o">&amp;</span><span class="n">__details</span> <span class="p">{</span>
        <span class="ss">display: </span><span class="n">none</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">base</span><span class="o">-</span><span class="n">selector</span><span class="o">--</span><span class="n">conditional</span><span class="o">-</span><span class="n">selector</span> <span class="p">.</span><span class="nf">base</span><span class="o">-</span><span class="n">selector__details</span> <span class="p">{</span>
  <span class="ss">display: </span><span class="n">none</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>With Parent referencing prefix, we can modify it to be:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#{$base-item-selector} {</span>
  <span class="o">&amp;--</span><span class="n">conditional</span><span class="o">-</span><span class="n">selector</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="sr">//</span> <span class="no">See</span> <span class="n">the</span> <span class="n">usage</span> <span class="n">of</span> <span class="n">ampersand</span> <span class="n">here</span>
    <span class="o">&amp;</span><span class="n">__details</span> <span class="p">{</span>
      <span class="ss">display: </span><span class="n">none</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">This</span> <span class="n">will</span> <span class="n">also</span> <span class="n">compiles</span> <span class="n">to</span> <span class="n">similar</span> <span class="n">css</span><span class="p">.</span>

<span class="nf">.</span><span class="n">base</span><span class="o">-</span><span class="n">selector</span><span class="o">--</span><span class="n">conditional</span><span class="o">-</span><span class="n">selector</span> <span class="p">.</span><span class="nf">base</span><span class="o">-</span><span class="n">selector__details</span> <span class="p">{</span>
  <span class="ss">display: </span><span class="n">none</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Cool, right? Saved one depth and looks more organised.</p>

<h2 id="defining-variables-as-defaults">Defining variables as defaults</h2>

<p>Using Sass, we can set variable precedence &amp; scope with the help of <code class="highlighter-rouge">!default</code> flag.
Placing <code class="highlighter-rouge">!default</code> at the end of declaration actually does the following things:</p>

<ul>
  <li>If you have defined a variable as <code class="highlighter-rouge">null</code>, it will be considered unassigned and will be assigned with <code class="highlighter-rouge">!default</code>.</li>
  <li>If the variable is assigned some value already, then it will not be re-assigned.</li>
</ul>

<p>Confused? ok, Letâ€™s talk it out.</p>

<p>For instance, we have defined a text color as red, the normal process follows like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span> <span class="n">_my</span><span class="o">-</span><span class="n">component</span><span class="p">.</span><span class="nf">scss</span>
<span class="vg">$text</span><span class="o">-</span><span class="ss">color: </span><span class="n">red</span> <span class="o">!</span><span class="n">default</span><span class="p">;</span>

<span class="n">a</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="vg">$text</span><span class="o">-</span><span class="n">color</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="n">a</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="n">red</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Makes sense so far, right? ok, letâ€™s continue. So, now you can override the colour while importing the component styling.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$text</span><span class="o">-</span><span class="ss">color: </span><span class="n">blue</span><span class="p">;</span>
<span class="vi">@import</span> <span class="err">â€˜</span><span class="n">my</span><span class="o">-</span><span class="n">component</span><span class="err">â€™</span><span class="p">;</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="n">a</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="n">blue</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>What this means is <code class="highlighter-rouge">!default</code> flag will only work if the values have not been already assigned/instantiated beforehand, otherwise it will be overridden.</p>

<p>This is an important way of writing modular CSS. Thatâ€™s why we tend to define most of our variables in a file for better accessibility. The <code class="highlighter-rouge">!default</code> flag is very useful when using with mixins and plug-in type code.</p>

<p>One more interesting example you can find <a href="https://anotheruiguy.gitbooks.io/sassintherealworld_book-i/handy-tools/default-flag.html">here</a></p>

<h2 id="mixins-and-custom-functions">Mixins and Custom Functions</h2>

<p>Mixins and functions both exist in the same family because both accept variables as arguments but have somewhat different responsibilities. Letâ€™s discuss one by one.</p>

<p><strong>Mixins:</strong> Mixins can accept arguments and do the required calculations you need but the output of a mixin would be a CSS rule.</p>

<p>It will unfold itself when called with <code class="highlighter-rouge">@include</code>.</p>

<p>For example, suppose we need to defined different typographies in our app. Then creating mixins would make more sense:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span> <span class="n">_my</span><span class="o">-</span><span class="n">typography</span><span class="o">-</span><span class="n">rules</span><span class="p">.</span><span class="nf">scss</span>

<span class="vi">@mixin</span> <span class="n">my</span><span class="o">-</span><span class="n">typography</span><span class="o">-</span><span class="n">small</span> <span class="p">{</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">size: </span><span class="o">.</span><span class="mi">75</span><span class="n">rem</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">weight: </span><span class="mi">300</span><span class="p">;</span>
  <span class="n">letter</span><span class="o">-</span><span class="ss">spacing: </span><span class="o">.</span><span class="mo">01</span><span class="n">em</span><span class="p">;</span>
  <span class="n">line</span><span class="o">-</span><span class="ss">height: </span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="n">_my</span><span class="o">-</span><span class="n">component</span><span class="p">.</span><span class="nf">scss</span>

<span class="c1">#{$base-selector} {</span>
  <span class="vi">@include</span> <span class="n">my</span><span class="o">-</span><span class="n">typography</span><span class="o">-</span><span class="n">small</span><span class="p">;</span>
<span class="p">}</span>

<span class="no">Compiles</span> <span class="n">to</span>

<span class="p">.</span><span class="nf">base</span><span class="o">-</span><span class="n">selector</span> <span class="p">{</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">size: </span><span class="o">.</span><span class="mi">75</span><span class="n">rem</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">weight: </span><span class="mi">300</span><span class="p">;</span>
  <span class="n">letter</span><span class="o">-</span><span class="ss">spacing: </span><span class="o">.</span><span class="mo">01</span><span class="n">em</span><span class="p">;</span>
  <span class="n">line</span><span class="o">-</span><span class="ss">height: </span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Functions:</strong> Its very much similar to mixins but in case of output it returns a single value.  Just like we have custom functions in every other language, using custom functions in sass can be very healthy for your application.</p>

<p>The Return value from a custom function can be of any data type. e.g. number, string, bool etc.</p>

<p>One of the best example we have here is calculating rems based on a base unit size. We are using this quite extensively in our application and this is something which can be used anywhere. Very generic!</p>

<p>Letâ€™s say, we are using rem unit with font sizes and everytime we use rem unit, we had to do manual computations. Sucks!! Isnâ€™t it?</p>

<p>How we really calculate <code class="highlighter-rouge">rem</code> is by dividing the target <code class="highlighter-rouge">size/base size</code> = <code class="highlighter-rouge">your result</code>. So the below function will give us the desired results and we can use it throughout our application.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span><span class="n">_utility</span><span class="p">.</span><span class="nf">scss</span>

<span class="sr">/**
 * Calculate rems based on a base unit.
 */</span>
<span class="vi">@function</span> <span class="n">remCalc</span><span class="p">(</span><span class="vg">$size</span><span class="p">,</span> <span class="vg">$base</span><span class="p">)</span> <span class="p">{</span>
  <span class="vg">$remSize</span><span class="p">:</span> <span class="vg">$size</span> <span class="o">/</span> <span class="vg">$font</span><span class="o">-</span><span class="n">base</span><span class="o">-</span><span class="n">size</span><span class="p">;</span>
  <span class="vi">@return</span> <span class="c1">#{$remSize}rem;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="n">_my</span><span class="o">-</span><span class="n">component</span><span class="p">.</span><span class="nf">scss</span>

<span class="n">a</span> <span class="p">{</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">size: </span><span class="n">remCalc</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="vg">$font</span><span class="o">-</span><span class="n">base</span><span class="o">-</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>I hope that now you get why Custom functions are really helpful as they help us avoid repeated computations. SCSS gives us a ton of inbuilt functions which you can have a look <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html">here</a></p>

<p>Itâ€™s always best to check in-built function first rather than creating your own every other time.</p>

<h2 id="default-arguments">Default Arguments</h2>

<p>This is high time we talk about default arguments as we just wrapped up mixin and custom functions. Theyâ€™re kinda related.</p>

<p>Mixins and custom functions both support arguments and icing on the cake is we can define default arguments as well.</p>

<p>For example:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@mixin</span> <span class="n">abc</span><span class="o">-</span><span class="n">with</span><span class="o">-</span><span class="n">margin</span><span class="p">(</span><span class="vg">$x</span><span class="p">,</span> <span class="vg">$y</span><span class="p">,</span> <span class="vg">$z</span><span class="p">,</span> <span class="vg">$margin</span><span class="p">:</span> <span class="mi">20</span><span class="n">px</span><span class="p">)</span> <span class="p">{</span>
  <span class="sr">//</span> <span class="no">Do</span> <span class="n">your</span> <span class="n">stuff</span> <span class="n">with</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">.</span>
  <span class="nf">margin</span><span class="p">:</span> <span class="vg">$margin</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="n">_my</span><span class="o">-</span><span class="n">component</span><span class="p">.</span><span class="nf">scss</span>

<span class="c1">#{$selector} {</span>
  <span class="vi">@include</span> <span class="n">abc</span><span class="o">-</span><span class="n">with</span><span class="o">-</span><span class="n">margin</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">34</span><span class="p">);</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">selector</span> <span class="p">{</span>
  <span class="sr">//</span> <span class="no">Stuff</span> <span class="n">we</span> <span class="n">did</span> <span class="n">with</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">.</span>
  <span class="nf">margin</span><span class="p">:</span> <span class="mi">20</span><span class="n">px</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>We can also override the default value. e.g.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span> <span class="n">_my</span><span class="o">-</span><span class="n">component</span><span class="p">.</span><span class="nf">scss</span>
<span class="c1">#{$selector} {</span>
  <span class="vi">@include</span> <span class="n">abc</span><span class="o">-</span><span class="n">with</span><span class="o">-</span><span class="n">margin</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">10</span><span class="n">px</span><span class="p">);</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">selector</span> <span class="p">{</span>
  <span class="sr">//</span> <span class="no">Stuff</span> <span class="n">we</span> <span class="n">did</span> <span class="n">with</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">.</span>
  <span class="nf">margin</span><span class="p">:</span> <span class="mi">10</span><span class="n">px</span><span class="p">;</span> <span class="sr">//</span> <span class="no">Overridden</span><span class="o">.</span>
<span class="p">}</span></code></pre></figure>

<h2 id="extending-your-selectors">Extending your selectors</h2>
<p>Using Scss, you can combine your selectorâ€™s styles in the CSS output. As we inherit properties from the parent class or whatever, this is quite comparable to other programming languages but the process is very different. Again, the aim is to reuse different selectorâ€™s styles so that we do not have to rewrite the code which is already being used.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">.</span><span class="nf">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="vi">@extend</span> <span class="p">.</span><span class="nf">menu</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">menu</span><span class="p">,</span> <span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>As we can see now <code class="highlighter-rouge">.header-menu</code> has all the properties of <code class="highlighter-rouge">.menu</code> plus the properties it already had. Traditional inheritance right? Now, whatever .menu will define it will be inherited by <code class="highlighter-rouge">.header-menu</code> and can be easily overridden as well.</p>

<p>You must be thinking, why canâ€™t we just use mixins here and just get it over with, why another logic. Iâ€™ll show you why not.</p>

<p><strong>If we go along with mixins:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@mixin</span> <span class="n">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">size: </span><span class="mi">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">weight: </span><span class="n">bold</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">grey</span><span class="p">;</span>
  <span class="ss">padding: </span><span class="mi">20</span><span class="n">px</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="vi">@include</span> <span class="n">menu</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">footer</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="vi">@include</span> <span class="n">menu</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">size: </span><span class="mi">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">weight: </span><span class="n">bold</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">grey</span><span class="p">;</span>
  <span class="ss">padding: </span><span class="mi">20</span><span class="n">px</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">footer</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">size: </span><span class="mi">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="n">font</span><span class="o">-</span><span class="ss">weight: </span><span class="n">bold</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">grey</span><span class="p">;</span>
  <span class="ss">padding: </span><span class="mi">20</span><span class="n">px</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>See how the last property is different and as soon as the amount of menu types increases will result in more and more repeated styles with each type of menu keeps on growing. This problem can be overcome by extending your selectors.</p>

<p>Another advantage is it can be used with UI libraries such as foundation, bootstrap etc. One interesting read is how we can extend complex selectors <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extending_complex_selectors">here</a>.</p>

<h2 id="placeholders">Placeholders</h2>

<p>We will take the help of a previous example, we just created a <code class="highlighter-rouge">.menu</code> selector just so that child selectors can inherit styles. But what if the case is that this selector does not even exists or not being used anywhere but only through its child classes. We might as well get rid of it.</p>

<p>Just to clarify few things before we move ahead:</p>

<ul>
  <li><code class="highlighter-rouge">.menu</code> is considered as a class.</li>
  <li><code class="highlighter-rouge">#menu</code> is considered as id.</li>
  <li><code class="highlighter-rouge">%menu</code> is considered as a placeholder.</li>
</ul>

<p>Just so we donâ€™t get confused between these.</p>

<p>This will result in same output as it was with the previous one.
For example:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">%</span><span class="n">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="vi">@extend</span> <span class="o">%</span><span class="n">menu</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">footer</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="vi">@extend</span> <span class="o">%</span><span class="n">menu</span><span class="p">;</span>
  <span class="ss">color: </span><span class="n">gray</span><span class="p">;</span>
<span class="p">}</span>

<span class="sr">//</span> <span class="no">Compiles</span> <span class="n">to</span> <span class="n">css</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span><span class="p">,</span> <span class="p">.</span><span class="nf">footer</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="ss">color: </span><span class="n">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="n">black</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nf">header</span><span class="o">-</span><span class="n">menu</span> <span class="p">{</span>
  <span class="ss">color: </span><span class="n">gray</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The only difference is that the menu has disappeared from the output as it was just a placeholder selector. This is really helpful because you are using the things which should only be outputted into the resulting CSS. For more information, read about placeholders <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders">here</a>.</p>

<p>Ok, Letâ€™s wrap up. I wanted to cover Control directives in this as well, but thatâ€™s a vast topic in itself. We will figure it out in my next blog. Stay tuned!</p>

<p>Thanks for reading. ðŸ˜ƒ</p>

:ET